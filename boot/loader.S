%include "boot.inc"

SECTION loader vstart=LOADER_BASE_ADDR  ;0x900
LOADER_STACK_TOP equ LOADER_BASE_ADDR   ;LOADER_STACK_TOP：loader在保护模式下的栈
                                        ;LOADER_BASE_ADDR：loader在实模式下时的栈指针地址
jmp loader_start

;构建全局描述表GDT，并分两段填充内部的段描述符（dd-> 4byte）
GDT_BASE: dd 0x00000000         ;NO.0-> 不可用置0
          dd 0x00000000

CODE_DESC: dd 0x0000FFFF        ;NO.1-> 代码段描述符
           dd DESC_CODE_HIGH4

DATA_STACK_DESC: dd 0x0000FFFF  ;NO.2-> 数据段和栈段描述符
                 dd DESC_DATA_HIGH4

                                ;NO.3-> 显存段描述符
VIDEO_DESC: dd 0x80000007       ;limit=(0xbffff-0xb8000)/4k=0x7
            dd DESC_VIDEO_HIGH4 ;此时 DPL 为0

GDT_SIZE equ $ - GDT_BASE
GDT_LIMIT equ GDT_SIZE - 1
times 60 dq 0                                   ; 此处预留60个描述符的空位
SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0   ; 相当于(CODE_DESC - GDT_BASE)/8 + TI_GDT + RPL0
SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0   ; 同上
SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0  ; 同上

;以下是GDT的指针，前2字节是GDT界限，后4字节是GDT起始地址
gdt_ptr dw GDT_LIMIT
        dd GDT_BASE
loadermsg db '2 loader in real.'


;------------------------------------------------------------
;INT 0x10
;功能号:0x13-> 打印字符串
;------------------------------------------------------------
;输入:
;AH 子功能号=13H
;BH = 页码
;BL = 属性(若 AL=00H 或 01H)
;CX=字符串长度
;(DH､ DL)=坐标(行､ 列)
;ES:BP=字符串地址
;AL=显示输出方式
; 0—字符串中只含显示字符，其显示属性在 BL 中，显示后，光标位置不变
; 1—字符串中只含显示字符，其显示属性在 BL 中，显示后，光标位置改变
; 2—字符串中含显示字符和显示属性。显示后，光标位置不变
; 3—字符串中含显示字符和显示属性。显示后，光标位置改变
;无返回值
loader_start:
    mov sp, LOADER_BASE_ADDR
    mov bp, loadermsg   ; ES:BP = 字符串地址
    mov cx, 17          ; CX = 字符串长度
    mov ax, 0x1301      ; AH = 13, AL = 01h
    mov bx, 0x001f      ; 页号为 0(BH = 0) 蓝底粉红字(BL = 1fh)
    mov dx, 0x1800
    int 0x10            ;中断

;-------------------- 准备进入保护模式 -------------------------------
;1、打开A20
    in al, 0x92
    or al, 0000_0010B
    out 0x92, al
;2、加载GDT
    lgdt [gdt_ptr]
;3、将CR0的pe位-> 置1
    mov eax, cr0
    or eax, 0x00000001
    mov cr0, eax

    jmp dword SELECTOR_CODE:p_mode_start    ; 刷新流水线


[bits 32]
p_mode_start:
    mov ax, SELECTOR_DATA
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov esp, LOADER_STACK_TOP   ;保护模式下的esp初始化
    mov ax, SELECTOR_VIDEO
    mov gs,ax

    mov byte [gs:160], 'P'

    jmp $